// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Accounts {
  id           String        @id
  name         String?
  username     String?
  passHash     String?
  empid        String?       @unique
  permissions  Json?
  active       Boolean?      @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  updatedById  String?
  staff        Staffs?       @relation(fields: [empid], references: [empid])
  auth_history AuthHistory[]
  Students     Students[]
  Payments     Payments[]
  FCAResults   FCAResults[]
  SCAResults   SCAResults[]
  ExamResults  ExamResults[]

  Promotions Promotions[]

  Demotions Demotions[]

  StudentsDemotions StudentsDemotions[]

  StudentsPromotions StudentsPromotions[]

  Disengagedstudent Disengagedstudent[]

  Disengagemnets Disengagemnets[]
}

model AuthHistory {
  id            String    @id @default(cuid())
  account_id    String?
  account       Accounts? @relation(fields: [account_id], references: [id])
  auth_status   String?   @default("Logged-in")
  logged_in_at  DateTime?
  logged_out_at DateTime?
}

model Staffs {
  empid               String        @id
  address             String?
  telephone           String?
  state_of_origin     String?
  lga                 String?
  qualification       String?
  grade_level         Int?
  salary              String?
  school_section      String?
  first_name          String?
  last_name           String?
  date_of_birth       DateTime?
  sex                 String?
  religion            String?
  marital_status      String?
  appointed_as        String?
  curr_appointment_id String?
  curr_appointment    Appointments? @relation(fields: [curr_appointment_id], references: [id])
  date_of_emp         DateTime?
  active              Boolean       @default(true)
  subjects            Subjects[]
  class_assigned      Classes?
  createdById         String?
  updatedById         String?
  updatedAt           DateTime      @updatedAt
  account             Accounts?
  Promotions          Promotions[]

  Demotions Demotions[]

  Disengagemnets Disengagemnets[]
}

model Disengagemnets {
  id                      String    @id @default(cuid())
  staff_id                String?
  staff                   Staffs?   @relation(fields: [staff_id], references: [empid])
  date_of_disengagement   DateTime? @default(now())
  method_of_disengagement String?
  reason                  String?
  employer_comment        String?
  createdById             String?
  createdBy               Accounts? @relation(fields: [createdById], references: [id])
}

model Students {
  id                 String    @id
  admission_no       String?   @unique
  first_name         String?
  last_name          String?
  date_of_birth      DateTime?
  sex                String
  address            String?
  state_of_origin    String?
  school_section     String?
  lga                String?
  religion           String?
  date_of_admission  DateTime?
  admission_session  String?
  admission_term     String?
  admission_class    String?
  active             Boolean   @default(true)
  guardian_name      String?
  guardian_telephone String?
  curr_class_id      String?
  curr_class         Classes?  @relation(fields: [curr_class_id], references: [id])
  createdById        String?
  createdBy          Accounts? @relation(fields: [createdById], references: [id])
  updatedById        String?
  updatedAt          DateTime  @updatedAt

  Payments    Payments[]
  FCAResults  FCAResults[]
  SCAResults  SCAResults[]
  ExamResults ExamResults[]

  StudentsPromotions StudentsPromotions[]

  StudentsDemotions StudentsDemotions[]

  Disengagedstudent Disengagedstudent[]

  ClassHistory ClassHistory[]
}

model Disengagedstudent {
  id                      String    @id @default(cuid())
  student_id              String?
  student                 Students? @relation(fields: [student_id], references: [id])
  session                 String?
  term                    String?
  date_of_disengagement   DateTime? @default(now())
  method_of_disengagement String?
  reason                  String?
  comment                 String?
  createdById             String?
  createdBy               Accounts? @relation(fields: [createdById], references: [id])
}

model ClassHistory {
  id         String    @id @default(uuid())
  student_id String?
  session    String?
  student    Students? @relation(fields: [student_id], references: [id])
  class_id   String?
  class      Classes?  @relation(fields: [class_id], references: [id])
}

model FCAResults {
  id          String    @id
  student_id  String?
  student     Students? @relation(fields: [student_id], references: [id])
  class_id    String?
  class       Classes?  @relation(fields: [class_id], references: [id])
  subject_id  String?
  subject     Subjects? @relation(fields: [subject_id], references: [id])
  score       Int?
  session     String?
  term        String?
  createdById String?
  createdBy   Accounts? @relation(fields: [createdById], references: [id])
  updatedById String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SCAResults {
  id          String    @id
  student_id  String?
  student     Students? @relation(fields: [student_id], references: [id])
  class_id    String?
  class       Classes?  @relation(fields: [class_id], references: [id])
  subject_id  String?
  subject     Subjects? @relation(fields: [subject_id], references: [id])
  score       Int?
  session     String?
  term        String?
  createdById String?
  createdBy   Accounts? @relation(fields: [createdById], references: [id])
  updatedById String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ExamResults {
  id          String    @id
  student_id  String?
  student     Students? @relation(fields: [student_id], references: [id])
  class_id    String?
  class       Classes?  @relation(fields: [class_id], references: [id])
  subject_id  String?
  subject     Subjects? @relation(fields: [subject_id], references: [id])
  score       Int?
  session     String?
  term        String?
  createdById String?
  createdBy   Accounts? @relation(fields: [createdById], references: [id])
  updatedById String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Payments {
  payment_id     String    @id
  student_id     String?
  student        Students? @relation(fields: [student_id], references: [id])
  item           String?
  section        String?
  class          String?
  term           String?
  session        String?
  payment_method String?
  teller_no      String?
  total          Int?
  paid           Int?
  status         String?
  createdById    String?
  createdBy      Accounts? @relation(fields: [createdById], references: [id])
  updatedById    String?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt
}

model Promotions {
  id           String        @id
  staff_id     String?
  staff        Staffs?       @relation(fields: [staff_id], references: [empid])
  from         String?
  from_section String?
  prev_salary  String?
  to_id        String?
  to           Appointments? @relation(fields: [to_id], references: [id])
  curr_salary  String?
  createdById  String?
  createdBy    Accounts?     @relation(fields: [createdById], references: [id])
  promotedOn   DateTime?     @default(now())
}

model Demotions {
  id           String        @id
  staff_id     String?
  staff        Staffs?       @relation(fields: [staff_id], references: [empid])
  from         String?
  from_section String?
  prev_salary  String?
  to_id        String?
  to           Appointments? @relation(fields: [to_id], references: [id])
  curr_salary  String?
  createdById  String?
  createdBy    Accounts?     @relation(fields: [createdById], references: [id])
  demotedOn    DateTime?     @default(now())
}

model StudentsPromotions {
  id          String    @id
  student_id  String?
  student     Students? @relation(fields: [student_id], references: [id])
  from        String?
  term        String?
  session     String?
  to_id       String?
  to          Classes?  @relation(fields: [to_id], references: [id])
  createdById String?
  createdBy   Accounts? @relation(fields: [createdById], references: [id])
  promotedOn  DateTime? @default(now())
}

model StudentsDemotions {
  id          String    @id
  student_id  String?
  student     Students? @relation(fields: [student_id], references: [id])
  from        String?
  term        String?
  session     String?
  to_id       String?
  to          Classes?  @relation(fields: [to_id], references: [id])
  createdById String?
  createdBy   Accounts? @relation(fields: [createdById], references: [id])
  demotedOn   DateTime? @default(now())
}

model Classes {
  id             String        @id
  name           String?
  teacher_id     String?       @unique
  teacher        Staffs?       @relation(fields: [teacher_id], references: [empid])
  school_section String?
  subjects       Subjects[]
  Students       Students[]
  FCAResults     FCAResults[]
  SCAResults     SCAResults[]
  ExamResults    ExamResults[]

  StudentsPromotions StudentsPromotions[]

  StudentsDemotions StudentsDemotions[]

  ClassHistory ClassHistory[]
}

model Subjects {
  id      String    @id
  name    String?
  Classes Classes[]
  Staffs  Staffs[]

  FCAResults  FCAResults[]
  SCAResults  SCAResults[]
  ExamResults ExamResults[]
}

model Appointments {
  id             String   @id
  name           String?
  school_section String?
  staffs         Staffs[]

  Promotions Promotions[]

  Demotions Demotions[]
}

model FeesGroup {
  id             String  @id
  name           String?
  amount         String?
  school_section String?
}
