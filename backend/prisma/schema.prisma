// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Accounts {
  id          String        @id
  name        String?
  username    String?
  passHash    String?
  role        String        @default("user")
  permissions Json?
  active      Boolean?      @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  updatedById String?
  Students    Students[]
  FCAResults  FCAResults[]
  SCAResults  SCAResults[]
  ExamResults ExamResults[]

  StudentsDemotions StudentsDemotions[]

  StudentsPromotions StudentsPromotions[]

  Disengagedstudent Disengagedstudent[]
  Transactions      Transaction[]

  Reciepts Reciept[]
  Payments Payment[]
}

model Students {
  id                 String    @id
  admission_no       String?   @unique
  first_name         String?
  last_name          String?
  date_of_birth      DateTime?
  sex                String?
  address            String?
  state_of_origin    String?
  school_section     String?
  lga                String?
  religion           String?
  date_of_admission  DateTime?
  admission_session  String?
  admission_term     String?
  admission_class    String?
  active             Boolean   @default(true)
  guardian_name      String?
  guardian_telephone String?
  curr_class_id      String?
  curr_class         Classes?  @relation(fields: [curr_class_id], references: [id])
  createdById        String?
  createdBy          Accounts? @relation(fields: [createdById], references: [id])
  updatedById        String?
  updatedAt          DateTime  @updatedAt

  transactions Transaction[]
  FCAResults   FCAResults[]
  SCAResults   SCAResults[]
  ExamResults  ExamResults[]

  StudentsPromotions StudentsPromotions[]

  StudentsDemotions StudentsDemotions[]

  Disengagedstudent Disengagedstudent[]

  ClassHistory ClassHistory[]
}

model Disengagedstudent {
  id                      String    @id @default(cuid())
  student_id              String?
  student                 Students? @relation(fields: [student_id], references: [id])
  session                 String?
  term                    String?
  date_of_disengagement   DateTime? @default(now())
  method_of_disengagement String?
  reason                  String?
  comment                 String?
  createdById             String?
  createdBy               Accounts? @relation(fields: [createdById], references: [id])
}

model ClassHistory {
  id         String    @id @default(uuid())
  student_id String?
  session    String?
  student    Students? @relation(fields: [student_id], references: [id])
  class_id   String?
  class      Classes?  @relation(fields: [class_id], references: [id])
}

model FCAResults {
  id          String    @id
  student_id  String?
  student     Students? @relation(fields: [student_id], references: [id])
  class_id    String?
  class       Classes?  @relation(fields: [class_id], references: [id])
  subject_id  String?
  subject     Subjects? @relation(fields: [subject_id], references: [id])
  score       Int?
  session     String?
  term        String?
  createdById String?
  createdBy   Accounts? @relation(fields: [createdById], references: [id])
  updatedById String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SCAResults {
  id          String    @id
  student_id  String?
  student     Students? @relation(fields: [student_id], references: [id])
  class_id    String?
  class       Classes?  @relation(fields: [class_id], references: [id])
  subject_id  String?
  subject     Subjects? @relation(fields: [subject_id], references: [id])
  score       Int?
  session     String?
  term        String?
  createdById String?
  createdBy   Accounts? @relation(fields: [createdById], references: [id])
  updatedById String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ExamResults {
  id          String    @id
  student_id  String?
  student     Students? @relation(fields: [student_id], references: [id])
  class_id    String?
  class       Classes?  @relation(fields: [class_id], references: [id])
  subject_id  String?
  subject     Subjects? @relation(fields: [subject_id], references: [id])
  score       Int?
  session     String?
  term        String?
  createdById String?
  createdBy   Accounts? @relation(fields: [createdById], references: [id])
  updatedById String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Transaction {
  id          String    @id
  items       TnxItem[]
  total       Int
  balance     Int
  year        Int
  month       String
  class       String?
  session     String?
  term        String?
  status      String
  createdById String?
  updatedById String?
  updatedBy   Accounts? @relation(fields: [updatedById], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  studentId   String?
  student     Students? @relation(fields: [studentId], references: [id])
  reciepts    Reciept[]
  payments    Payment[]
}

model TnxItem {
  id            String      @id @default(uuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  feeId         String
  fee           FeesGroup   @relation(fields: [feeId], references: [id])
  price         Int
  paid          Int
  balance       Int
  class         String?
  session       String?
  term          String?
  active        Boolean     @default(true)
  year          Int?
  month         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  payments      Payment[]
}

model Payment {
  id          String       @id @default(uuid())
  tnxId       String?
  transaction Transaction? @relation(fields: [tnxId], references: [id])
  itemId      String
  tnxItem     TnxItem      @relation(fields: [itemId], references: [id])
  name        String
  paid        Int
  method      String?
  class       String?
  session     String?
  term        String?
  createdById String?
  createdBy   Accounts?    @relation(fields: [createdById], references: [id])
  type        String       @default("payment")
  year        Int?
  month       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Reciept {
  id          String      @id
  items       Json
  tnxId       String
  transaction Transaction @relation(fields: [tnxId], references: [id])
  year        Int
  month       String
  status      String
  createdById String?
  createdBy   Accounts?   @relation(fields: [createdById], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model StudentsPromotions {
  id          String    @id
  student_id  String
  student     Students  @relation(fields: [student_id], references: [id])
  from        String?
  term        String?
  session     String?
  to_id       String
  to          Classes   @relation(fields: [to_id], references: [id])
  createdById String?
  createdBy   Accounts? @relation(fields: [createdById], references: [id])
  promotedOn  DateTime? @default(now())
}

model StudentsDemotions {
  id          String    @id
  student_id  String
  student     Students  @relation(fields: [student_id], references: [id])
  from        String?
  term        String?
  session     String?
  to_id       String
  to          Classes   @relation(fields: [to_id], references: [id])
  createdById String?
  createdBy   Accounts? @relation(fields: [createdById], references: [id])
  demotedOn   DateTime? @default(now())
}

model Classes {
  id                 String               @id
  name               String?
  school_section     String?
  subjects           Subjects[]
  Students           Students[]
  FCAResults         FCAResults[]
  SCAResults         SCAResults[]
  ExamResults        ExamResults[]
  fees               FeesGroup[]
  StudentsPromotions StudentsPromotions[]

  StudentsDemotions StudentsDemotions[]

  ClassHistory ClassHistory[]
}

model Subjects {
  id      String    @id
  name    String?
  Classes Classes[]

  FCAResults  FCAResults[]
  SCAResults  SCAResults[]
  ExamResults ExamResults[]
}

model FeesGroup {
  id      String    @id
  name    String?
  amount  String?
  classes Classes[]
  tnxItem TnxItem[]
}
